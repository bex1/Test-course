
@author Daniel Bäckström & Martin Hermansson


a) setRequiredNumber 

 ******************* Specification ********************
 *
 * requires: 
 * 		starttime >= 0, endtime < size, starttime <= endtime, nemployee >= 0 
 * ensures: 
 * 		For i between starttime and endtime, the requiredNumber of hour i equals nemployee. 
 * 		For all other i the schedule is unchanged.
 *
 *******************  Input Space  ********************
 * 
 * {All integers nemployee, starttime and endtime such that 0 <= starttime <= endtime and endtime < size and nemployee >= 0}
 * as indicated by the specification.
 * 
 ***********  Partitioning Of Input Space  ************
 *
 * nemployee == 0 and starttime == 0 and starttime == endtime or not
 * nemployee == 0 and starttime == 0 and starttime <  endtime or not
 * nemployee == 0 and starttime > 0  and starttime == endtime or not 
 * nemployee == 0 and starttime > 0  and starttime <  endtime or not
 * nemployee >  0 and starttime == 0 and starttime == endtime or not
 * nemployee >  0 and starttime == 0 and starttime <  endtime or not
 * nemployee >  0 and starttime > 0  and starttime == endtime or nemployee > 0 and starttime > 0 and starttime < endtime
 *
 ************** Motivation for Test Cases *************
 *
 * We made at least one test for each partitioning where we checked the expected result
 * and that nothing was unchanged for the other hours. Hence testing the postconditions
 * given in the specification by sticking too the input space and our partitionings of it.
 *  
 ******************************************************


b) addWorkingPeriod

 ******************* Specification *******************
 *
 * requires: 
 * 		employee is a non-null string
 * ensures:
 * 		if starttime < 0 or endtime >= size or starttime > endtime then
 *   			returns false and the schedule is unchanged
 * 		otherwise
 *   			if for any hour in the interval starttime to endtime the length of workingEmployees is equal to requiredNumber then
 *     				returns false and the schedule is unchanged
 *   			otherwise
 *     				if for any hour in the interval starttime to endtime there is a string in workingEmployees which equal employee then
 *       				returns false and the schedule is unchanged
 *     				otherwise
 *       				returns true,
 *       				for i between starttime and endtime, workingEmployees contain a string equal to employee and
 *       				the rest of the schedule is unchanged
 *
 *******************  Input Space  ********************
 * 
 * {All integers starttime and endtime and all non null strings employee}
 * as indicated by the specification.
 * 
 ***********  Partitioning Of Input Space  ***********
 *
 * starttime < 0 or starttime >= 0
 * endtime == size or endtime != size
 * endtime > size or endtime < size
 * starttime > endtime or starttime <= endtime
 * starttime == endtime or starttime < endtime
 * [starttime, endtime] of schedule contains >= 1 hour h such that h.workingEmployees.length == h.requiredNumber or 0 such hours
 * [starttime, endtime] of schedule contains >= 1 hour h such that h.workingEmployees contains >= 1 string which equal employee or 0 such hours
 * employee is empty or not empty
 *
 ************** Motivation for Test Cases **********
 *
 * We made at least one test for each partitioning that covered each subcondition of the postcondition
 * where we checked the expected result and that nothing had changed where it wasn't supposed to, 
 * according to the postcondition in the specification. Hence testing the postconditions
 * given in the specification by sticking too the input space and our partitionings of it.
 *
 ***************************************************


c) workingEmployees

 ******************* Specification *****************
 *
 * requires:
 * 		starttime >= 0 and endtime < size 
 * ensures:
 *		if starttime <= endtime then
 *			returns an array with distinct strings -- a string appears in the return array if and only if 
 *			it appears in the workingEmployees of at least one hour in the interval starttime to endtime
 *		otherwise
 *			returns an empty array
 *		and in either case the schedule is unchanged
 *
 *******************  Input Space  ******************
 * 
 * {All integers starttime and endtime such that starttime >= 0 and endtime < size}
 * as indicated by the specification.
 * 
 ***********  Partitioning Of Input Space  **********
 *
 * starttime > endtime or not
 * starttime == endtime and employee scheduled for hour starttime, not scheduled for hour startime or starttime < endtime
 * starttime < endtime and number of hours in [starttime, endtime] the employee is scheduled for is 0, 1 or >1 
 * 
 ************** Motivation for Test Cases ***********
 *
 * We made at least one test for each partitioning that covered each subcondition of the postcondition
 * where we checked the expected result and that nothing had changed at all,
 * according to the postcondition in the specification. Hence testing the postconditions
 * given in the specification by sticking too the input space and our partitionings of it.
 *
 ****************************************************


d) nextIncomplete

 ******************* Specification ******************
 *
 * requires: 
 * 		currenttime >= 0 and currenttime < size 
 * ensures:
 * 		if there is an hour in the interval currenttime to (size - 1) 
 * 		such that the length of workingEmplyees is less that requiredNumber then
 *   			returns the time of the hour closest to currenttime 
 *   			such that the length of workingEmplyees is less than requiredNumber
 * 		otherwise
 *   			returns -1
 *		in either case the schedule is unchanged
 *
 *******************  Input Space  ******************
 * 
 * {All integers currenttime such that 0 =< currenttime < size}
 * as indicated by the specification.
 * 
 ***********  Partitioning Of Input Space  **********
 *
 * [currenttime, size-1] of schedule contains no hour h such that h.workingEmployees.length < h.requiredNumber or > 0 hours
 * [currenttime, size-1] of schedule contains 1 hour h such that h.workingEmployees.length < h.requiredNumber or > 1 hours
 *
 ************** Motivation for Test Cases ***********
 *
 * We made at least one test for each partitioning that covered each subcondition of the postcondition
 * where we checked the expected result and that nothing had changed at all,
 * according to the postcondition in the specification. Hence testing the postconditions
 * given in the specification by sticking too the input space and our partitionings of it.
 *
 ****************************************************

