**************************************************************************************************************************************************************

Daniel Bäckström and Martin Hermansson
Group 4

**************************************************************************************************************************************************************

1.

Setup:

S = statements of the program
Q = precondition
R = postcondition

What we want to prove:
Q ==> wp(S, R)

S = if (x < 0) then (y := -x) else (y := x)
Q = True
R = (0 <= y && (0 <= x ==> y == x) && x < 0 ==> y == -x)

Proof:

wp(S, R)
wp(if (x < 0) then (y := -x) else (y := x), R)

[Conditional rule]
	x < 0 ==> wp(y := -x, 0 <= y && 0 <= x ==> y == x && x < 0 ==> y == -x) &&
	x >= 0 ==> wp(y := x, 0 <= y && 0 <= x ==> y == x && x < 0 ==> y == -x)

[Assignment rule]
	x < 0 ==> (0 <= -x && (0 <= x ==> -x == x) && x < 0 ==> -x == -x) && 
	x >= 0) ==> (0 <= x && (0 <= x ==> x == x) && x < 0 ==> x == -x)

Here we split up the expression and prove each to be correct:
	A = (x < 0 ==> (0 <= -x && (0 <= x ==> -x == x) && x < 0 ==> -x == -x))
	B = (x >= 0) ==> (0 <= x && (0 <= x ==> x == x) && x < 0 ==> x == -x))

Prove A && B from above:
	For A:
		x < 0 ==>
			0 <= -x <-- Trivially true
			&&
			(0 <= x ==> -x == x) <-- Since x must be smaller than 0 the LHS will always be false. Hence implication is true.
			&&
			x < 0 ==> -x == -x <-- Trivially true
	==> A is always true
	
	For B:
		x >= 0 ==>
			0 <= x <-- Trivially true
			&&
			(0 <= x ==> x == x) <-- Trivially true
			&&
			x < 0 ==> x == -x <-- Since x must be greater than 0 the LHS will always be false. Hence implication is true.
	==> B is always true
	
Since A && B are both true the method is proven to fulfill the postcondition R.

Q ==> wp(S, R)
True ==> True <-- Trivially true

**************************************************************************************************************************************************************

2a.

Setup:

S = statements of the program
Q = precondition
R = postcondition

What we want to prove:
Q ==> wp(S, R)

Proof:

b = big
s = small

S = if (x > y) then (b := x; s := y) else (b := y; s := x)
Q = True
R = b > s

wp(S, R)
wp(if (x > y) then (b := x; s := y) else (b := y; s := x, R))

[Conditional rule]
	 x >  y ==> wp((b, s := x, y), b > s) &&
	 x <= y ==> wp((b, s := y, x), b > s)

[Sequential rule]
	x >  y ==> wp(b := x, wp(s := y, b > s)) &&
	x <= y ==> wp(b := y, wp(s := x, b > s))

[Assignment rule]
	x >  y ==> wp(b := x, b > y) && 
	x <= y ==> wp(b := y, b > x)

[Assignment rule]
	x >  y ==> x > y && 
	x <= y ==> y > x

[Logic]
	x > y ==> x > y && (x <= y) ==> (y > x)

[Commutativity]
	x > y ==> x > y && (y => x) ==> (y > x)
	|_____________|    |__________________|
	       |                     |
	      = A                   = B

A <-- Trivially true
B is false! A counter example would be if y == x. That does not imply that y > x.

True =/=> True && False

What the program misses is a precondition that x != y.

**************************************************************************************************************************************************************

2b.

Setup:

S = statements of the program
Q = precondition
R = postcondition

What we want to prove:
Q ==> wp(S, R)

Proof:

b = big
s = small

S = if (x > y) then (b := x; s := y) else (b := y; s := x)
Q = x != y
R = b > s

From 2a we get that:
wp(S, R) <==> A && B 

Need to prove that
x != y ==>         A         &&          B
x != y ==> (x > y ==> x > y) && (x <= y ==> y > x)

A is still trivially true but now we can prove B.

x != y ==> (x <= y ==> y > x)

Since x can no longer be equal to y this holds as well.


**************************************************************************************************************************************************************

3b.

Setup:

S1, S = statements of the program
Q = precondition
R = postcondition
I = invariant
V = variant (decreases)
B = loop condition

Let S1 be the statements before the while loop, S the statements inside the while loop.

S1 = res := 0; if (n0 >= 0) then (n := n0; m := m0) else (n := -n0; m := -m0)
S = res := res + m; n := n - 1
Q = true
R = res == n0 * m0
I = 0 <= n && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m)
V = n
B = 0 < n

This is what we want to prove for total correctness:

1) (I needs to hold when entering the loop)

Need to prove:
Q ==> wp(S1, I)

To prove this wp(S1, I) must be true to fulfill the implication's truthiness.

wp(res := 0, if (n0 >= 0) then (n := n0; m := m0) else (n := -n0; m := -m0), I)

[Conditional rule]
	wp(res := 0; (n0 >= 0 ==> wp(n := n0, m := m0, I)) && 
	             (n0 < 0 ==> wp(n := -n0, m := -m0, I)))

[Sequential rule]
	wp(res := 0; (n0 >= 0 ==> wp(n := n0, wp(m := m0, I))) && 
				 (n0 < 0 ==> wp(n := -n0, wp(m := -m0, I))))

[Assign I its value]
	wp(res := 0; (n0 >= 0 ==> wp(n := n0, wp(m := m0,  (0 <= n && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m))))) && 
				 (n0 < 0 ==> wp(n := -n0, wp(m := -m0, (0 <= n && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m))))))

[Assignment rule]
	wp(res := 0; (n0 >= 0 ==> wp(n := n0, (0 <= n && (n0 >= 0 ==> res == (n0 - n) * m0) && (n0 < 0 ==> res == (-n0 - n) * m0)))) && 
				 (n0 < 0 ==> wp(n := -n0, (0 <= n && (n0 >= 0 ==> res == (n0 - n) * -m0) && (n0 < 0 ==> res == (-n0 - n) * -m0)))))

[Assignment rule]
	wp(res := 0; (n0 >= 0 ==> (0 <= n0 && (n0 >= 0 ==> res == (n0 - n0) * m0) && (n0 < 0 ==> res == (-n0 - n0) * m0))) && 
				 (n0 < 0 ==> (0 <= -n0 && (n0 >= 0 ==> res == (n0 + n0) * -m0) && (n0 < 0 ==> res == (-n0 + n0) * -m0))))

[Assignment rule]
	(n0 >= 0 ==> (0 <= n0 && (n0 >= 0 ==> 0 == (n0 - n0) * m0) && (n0 < 0 ==> 0 == (-n0 - n0) * m0))) && 
	(n0 < 0 ==> (0 <= -n0 && (n0 >= 0 ==> 0 == (n0 + n0) * -m0) && (n0 < 0 ==> 0 == (-n0 + n0) * -m0)))

[Simplify]
    (n0 >= 0 ==> 
      			  (0 <= n0 &&                          	<-------- trivially true
      			  (n0 >= 0 ==> 0 == 0) && 				<-------- trivially true
      			  (n0 < 0 ==> 0 == -2 * n0 * m0))) 		<-------- true since 0 <= n0 ensures that n0 < 0 is false
    && 
    (n0 < 0 ==> 
    			  (0 <= -n0 && 							<-------- trivially true
    			  (n0 >= 0 ==> 0 == 2 * n0 * -m0) &&    <-------- true since 0 <= -n0 ensures that n0 >= 0 is false
    			  (n0 < 0 ==> 0 == 0)))					<-------- trivially true

Q ==> true && true
Q ==> true <-- Trivially true


2) (I holds each iteration)

Need to prove:
I && B ==> wp(S, I)

I && B <==> 0 <= n && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m) && 0 < n

which can be simplified since (0 <= n && 0 < n) <==> 0 < n to:

I && B <==> 0 < n && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m)



wp(res := res + m, n := n - 1, I)

[Sequential rule]
	wp(res := res + m, wp(n := n - 1, I))

[Assign I its value]
	wp(res := res + m, wp(n := n - 1, (0 <= n && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m))))

[Assignment rule]
	wp(res := res + m, (0 <= n - 1 && (n0 >= 0 ==> res == (n0 - (n - 1)) * m) && (n0 < 0 ==> res == (-n0 - (n - 1)) * m)))

[Assignment rule]
	(0 <= n - 1 && (n0 >= 0 ==> res + m == (n0 - (n - 1)) * m) && (n0 < 0 ==> res + m == (-n0 - (n - 1)) * m))

[Simplify]
	1 <= n && (n0 >= 0 ==> res + m == (n0 - n + 1) * m) && (n0 < 0 ==> res + m == (-n0 - n + 1) * m)

[Simplify]
	0 < n && (n0 >= 0 ==> res + m == (n0 - n) * m + m) && (n0 < 0 ==> res + m == (-n0 - n) * m + m)

[Simplify]
	0 < n && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m)       <----------- Same as I && B

Therefore we conclude that
I && B ==> wp(S, I) is true since we proved that I && B <==> wp(S, I)


3) (Postcondition holds after loop)

Need to prove:
I && !B ==> R

I && !B <==> 0 <= n && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m) && 0 >= n

which can be simplified since (0 <= n && 0 >= n) <==> 0 == n to:

I && !B <==> 0 == n && (n0 >= 0 ==> res == n0 * m) && (n0 < 0 ==> res == -n0 * m)


Now we can show that I && !B ==> R

(0 == n && (n0 >= 0 ==> res == n0 * m) && (n0 < 0 ==> res == -n0 * m)) ==> res == n0 * m0
|______|   |_________________________|    |__________________________|
   X                  Y                                Z

X tells us nothing relevant.

Y with the use of S1 above tells us that when n0 >= 0 then it must be the case that m == m0 since they are both unchanged after this  
so we can conclude that n0 >= 0 ==> res == n0 * m0

Z with the use of S1 above tells us that when n0 < 0 then it must be the case that m == -m0 since they are both unchanged after this
so we can conclude that n0 < 0 ==> res == n0 * m0

Since one of n0 >= 0 and n0 < 0 must be true we can therefore conclude that I && !B ==> R.


4)  (Variant is bounded until loop termination)

Need to prove:
I && B ==> V > 0

I && B ==> n > 0

which is trivially true from loop guard B since 0 < n <==> n > 0 

5) Variant decreases each iteration:

Need to prove:
I && B ==> wp(V1 := V; S, V < V1)


wp(V1 := V; S, V < V1)

wp(V1 := n; res := res + m; n := n - 1, n < V1)

[Sequential rule]
	wp(V1 := n; res := res + m, wp(n := n - 1, n < V1))

[Assignment rule]
	wp(V1 := n; res := res + m, n - 1 < V1)

[Sequential rule]
	wp(V1 := n, wp(res := res + m, n - 1 < V1))

[Assignment rule]
	wp(V1 := n, n - 1 < V1)

[Assignment rule]
	n - 1 < n  <------- trivially true independent of I && B

Hence 
I && B ==> wp(V1 := V; S, V < V1) is always true and is therefore proved.

**************************************************************************************************************************************************************

4b.


**************************************************************************************************************************************************************